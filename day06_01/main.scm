(define (main args)
  (define lines (call-with-input-file "./input.txt" port->string-list))

  (let loop ((times (find-all-numbers (list-ref lines 0)))
             (distances (find-all-numbers (list-ref lines 1)))
             (sum 1))
    (if (null? times) 
      (print sum)
      (loop (cdr times)
            (cdr distances)
            (* sum (count-way (car times) (car distances))))))
0)

(define (find-all-numbers line)
  (let loop ((start 0) (numbers '()))
    (if (< start (string-length line))
      (let ((m (rxmatch  #/\d+/ line start)))
        (loop (+ 1 (rxmatch-end m)) (cons (rxmatch-substring m) numbers)))
      (map string->number (reverse numbers)))))

(define (count-way time distance)
  (let loop ((n 0) (sum 0))
    (if (<= n time)
      (if (< distance (* n (- time n)))
        (loop (+ n 1) (+ sum 1))
        (loop (+ n 1) sum))
      sum)))